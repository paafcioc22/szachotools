//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Ten kod źródłowy został wygenerowany automatycznie przez Microsoft.VSDesigner, wersja 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace App2.Droid.WebSzacho {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CDNOffLineSrvSoap", Namespace="http://www.comarch.pl/cdn/Products/CDN XL/")]
    public partial class CDNOffLineSrv : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ReceiveDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteSQLCommandOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteSQLXmlCommandOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CDNOffLineSrv() {
            this.Url = "http://serwer.szachownica.com.pl/cdnofflinesrv/cdnofflinesrv.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ReceiveDataCompletedEventHandler ReceiveDataCompleted;
        
        /// <remarks/>
        public event SendDataCompletedEventHandler SendDataCompleted;
        
        /// <remarks/>
        public event ExecuteSQLCommandCompletedEventHandler ExecuteSQLCommandCompleted;
        
        /// <remarks/>
        public event ExecuteSQLXmlCommandCompletedEventHandler ExecuteSQLXmlCommandCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.comarch.pl/cdn/Products/CDN XL/ReceiveData", RequestNamespace="http://www.comarch.pl/cdn/Products/CDN XL/", ResponseNamespace="http://www.comarch.pl/cdn/Products/CDN XL/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ReceiveData(int oddzialID) {
            object[] results = this.Invoke("ReceiveData", new object[] {
                        oddzialID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void ReceiveDataAsync(int oddzialID) {
            this.ReceiveDataAsync(oddzialID, null);
        }
        
        /// <remarks/>
        public void ReceiveDataAsync(int oddzialID, object userState) {
            if ((this.ReceiveDataOperationCompleted == null)) {
                this.ReceiveDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceiveDataOperationCompleted);
            }
            this.InvokeAsync("ReceiveData", new object[] {
                        oddzialID}, this.ReceiveDataOperationCompleted, userState);
        }
        
        private void OnReceiveDataOperationCompleted(object arg) {
            if ((this.ReceiveDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceiveDataCompleted(this, new ReceiveDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.comarch.pl/cdn/Products/CDN XL/SendData", RequestNamespace="http://www.comarch.pl/cdn/Products/CDN XL/", ResponseNamespace="http://www.comarch.pl/cdn/Products/CDN XL/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendData([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] data, int oddzialID) {
            this.Invoke("SendData", new object[] {
                        data,
                        oddzialID});
        }
        
        /// <remarks/>
        public void SendDataAsync(byte[] data, int oddzialID) {
            this.SendDataAsync(data, oddzialID, null);
        }
        
        /// <remarks/>
        public void SendDataAsync(byte[] data, int oddzialID, object userState) {
            if ((this.SendDataOperationCompleted == null)) {
                this.SendDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendDataOperationCompleted);
            }
            this.InvokeAsync("SendData", new object[] {
                        data,
                        oddzialID}, this.SendDataOperationCompleted, userState);
        }
        
        private void OnSendDataOperationCompleted(object arg) {
            if ((this.SendDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.comarch.pl/cdn/Products/CDN XL/ExecuteSQLCommand", RequestNamespace="http://www.comarch.pl/cdn/Products/CDN XL/", ResponseNamespace="http://www.comarch.pl/cdn/Products/CDN XL/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteSQLCommand(string sqlCommand) {
            object[] results = this.Invoke("ExecuteSQLCommand", new object[] {
                        sqlCommand});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteSQLCommandAsync(string sqlCommand) {
            this.ExecuteSQLCommandAsync(sqlCommand, null);
        }
        
        /// <remarks/>
        public void ExecuteSQLCommandAsync(string sqlCommand, object userState) {
            if ((this.ExecuteSQLCommandOperationCompleted == null)) {
                this.ExecuteSQLCommandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteSQLCommandOperationCompleted);
            }
            this.InvokeAsync("ExecuteSQLCommand", new object[] {
                        sqlCommand}, this.ExecuteSQLCommandOperationCompleted, userState);
        }
        
        private void OnExecuteSQLCommandOperationCompleted(object arg) {
            if ((this.ExecuteSQLCommandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteSQLCommandCompleted(this, new ExecuteSQLCommandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.comarch.pl/cdn/Products/CDN XL/ExecuteSQLXmlCommand", RequestNamespace="http://www.comarch.pl/cdn/Products/CDN XL/", ResponseNamespace="http://www.comarch.pl/cdn/Products/CDN XL/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ExecuteSQLXmlCommand(string sqlCommand) {
            object[] results = this.Invoke("ExecuteSQLXmlCommand", new object[] {
                        sqlCommand});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteSQLXmlCommandAsync(string sqlCommand) {
            this.ExecuteSQLXmlCommandAsync(sqlCommand, null);
        }
        
        /// <remarks/>
        public void ExecuteSQLXmlCommandAsync(string sqlCommand, object userState) {
            if ((this.ExecuteSQLXmlCommandOperationCompleted == null)) {
                this.ExecuteSQLXmlCommandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteSQLXmlCommandOperationCompleted);
            }
            this.InvokeAsync("ExecuteSQLXmlCommand", new object[] {
                        sqlCommand}, this.ExecuteSQLXmlCommandOperationCompleted, userState);
        }
        
        private void OnExecuteSQLXmlCommandOperationCompleted(object arg) {
            if ((this.ExecuteSQLXmlCommandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteSQLXmlCommandCompleted(this, new ExecuteSQLXmlCommandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ReceiveDataCompletedEventHandler(object sender, ReceiveDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceiveDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceiveDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SendDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ExecuteSQLCommandCompletedEventHandler(object sender, ExecuteSQLCommandCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteSQLCommandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteSQLCommandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ExecuteSQLXmlCommandCompletedEventHandler(object sender, ExecuteSQLXmlCommandCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteSQLXmlCommandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteSQLXmlCommandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591